#!bash

mothurRv=/mnt/EXT/Schloss-data/bin/mothur
tempMothur=/nfs/turbo/schloss-lab/msze/axiom_home_stuff/bin/mothurV1.39.3/mothur/mothur
DOWNDIR=data/raw
WORKDIR=data/process
REF=data/references

module load sratoolkit/2.8.2-1

#Unzip fastq files and place them in work directory
#cp $DOWNDIR/part_one/*.fastq.gz $WORKDIR
#cp $DOWNDIR/part_two/*.fastq.gz $WORKDIR
#cp $DOWNDIR/repeated_V2_frozens/*.fastq.gz $WORKDIR
#gzip -d $WORKDIR/*.gz

# Rename all files with "-" to "_" in workdir
#for i in `ls $WORKDIR/*-*`;
#do
#	NEW=`echo $i|tr '-' '_'`
#	mv $i $NEW
#done

# Run mothur process
#$tempMothur "#make.contigs(file=$WORKDIR/mock_amp.files);
#	summary.seqs(fasta=current, processors=8);
#	screen.seqs(fasta=current, group=current, summary=current, maxambig=0, maxlength=275);
#	summary.seqs(fasta=current);
#	unique.seqs(fasta=current);
#	summary.seqs(fasta=current, name=current);
#	count.seqs(name=current, group=current);
#	summary.seqs(fasta=current, count=current);
#	align.seqs(fasta=current, reference=$REF/silva.v4.align);
#	summary.seqs(fasta=current, count=current);
#	screen.seqs(fasta=current, count=current, summary=current, start=1968, end=11550, maxhomop=8);
#	summary.seqs(fasta=current,count=current);
#	filter.seqs(fasta=current, vertical=T, trump=.);
#	unique.seqs(fasta=current, count=current);
#	pre.cluster(fasta=current, count=current, diffs=2);
#	chimera.vsearch(fasta=current, count=current, dereplicate=t, processors=8);
#	remove.seqs(fasta=current, accnos=current);
#	summary.seqs(fasta=current, count=current);
#	classify.seqs(fasta=current, count=current, reference=$REF/trainset14_032015.pds.fasta, taxonomy=$REF/trainset14_032015.pds.tax, cutoff=80);
#	remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota);
#	seq.error(fasta=current, count=current, reference=$REF/zymo.mock.16S.align, aligned=F, processors=8)"

# Rename the relevent fasta and count file to be used for later analysis
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.summary $WORKDIR/mock_error.summary
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.seq.reverse $WORKDIR/mock_error.seq.reverse
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.seq.forward $WORKDIR/mock_error.seq.forward
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.seq $WORKDIR/mock_error.seq
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.ref $WORKDIR/mock_error.ref
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.matrix $WORKDIR/mock_error.matrix
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.count $WORKDIR/mock_error.count
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.error.chimera $WORKDIR/mock_error.chimera
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table $WORKDIR/mock_error.count_table
mv $WORKDIR/mock_amp.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta $WORKDIR/mock_error.fasta

# Remove all the extra files
rm $WORKDIR/*.fastq
rm $WORKDIR/mock_amp.trim.* $WORKDIR/mock_amp.contigs.* $WORKDIR/mock_amp.scrap.*
rm $WORKDIR/mock_amp.filter


	
